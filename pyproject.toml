[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "vibe-dating-backend"
version = "0.1.0"
description = "Vibe Dating App Backend - AWS Serverless API"
authors = ["Vibe Dating Team <dev@vibe-dating.io>"]
readme = "README.md"
packages = [{include = "src"}]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.11"
boto3 = "^1.34.0"
botocore = "^1.34.0"
PyJWT = "^2.8.0"
requests = "^2.31.0"
urllib3 = "^2.0.7"
python-dateutil = "^2.8.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.12.0"
mypy = "^1.0.0"
flake8 = "^6.0.0"
pre-commit = "^3.0.0"

[tool.poetry.group.lambda.dependencies]
PyJWT = "2.8.0"
boto3 = "1.34.0"
botocore = "1.34.0"
requests = "2.31.0"
urllib3 = "2.0.7"
python-dateutil = "2.8.2"

[tool.poetry.scripts]
build-lambda = "scripts.build:build_lambda"
build-auth = "scripts.build:build_auth_service"
deploy-auth = "scripts.deploy:deploy_auth_service"
deploy-core = "scripts.deploy:deploy_core_service"
test-lambda = "scripts.test:test_lambda_functions"
upload-auth-zips = "scripts.upload_lambda_zips:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["boto3", "fastapi", "pydantic"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "mangum.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 