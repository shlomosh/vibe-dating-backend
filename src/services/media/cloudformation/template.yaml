AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vibe Dating - Media Service Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  Region:
    Type: String
    Description: Region for the application (e.g., il-central-1)

  LambdaCodeBucketName:
    Type: String
    Description: Lambda Code Bucket Name (imported from s3 stack)

  LambdaExecutionRoleArn:
    Type: String
    Description: Lambda Execution Role ARN (imported from iam stack)

  DynamoDBTableName:
    Type: String
    Description: DynamoDB Table Name (imported from dynamodb stack)

  ApiGatewayRestApiId:
    Type: String
    Description: API Gateway Rest API ID (imported from auth stack)
  
  ApiGatewayRootResourceId:
    Type: String
    Description: API Gateway Root Resource ID (imported from auth stack)

  CoreLayerArn:
    Type: String
    Description: Core Layer ARN (imported from core service)

Resources:
  # S3 Bucket for Media Storage
  MediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'vibe-dating-media-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: media

  # S3 Bucket Policy for CloudFront Access
  # MediaBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref MediaBucket
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: CloudFrontAccess
  #           Effect: Allow
  #           Principal:
  #             Service: cloudfront.amazonaws.com
  #           Action: s3:GetObject
  #           Resource: !Sub '${MediaBucket}/*'
  #           Condition:
  #             StringEquals:
  #               AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/*'

  # CloudFront Distribution for Media Delivery
  # CloudFrontDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Comment: !Sub 'Vibe Dating Media CDN - ${Environment}'
  #       Enabled: true
  #       DefaultCacheBehavior:
  #         TargetOriginId: MediaS3Origin
  #         ViewerProtocolPolicy: redirect-to-https
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         CachedMethods:
  #           - GET
  #           - HEAD
  #         Compress: true
  #         DefaultTTL: 86400
  #         MaxTTL: 31536000
  #         MinTTL: 0
  #         ForwardedValues:
  #           QueryString: false
  #           Cookies:
  #             Forward: none
  #       Origins:
  #         - Id: MediaS3Origin
  #           DomainName: !GetAtt MediaBucket.RegionalDomainName
  #           S3OriginConfig:
  #             OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
  #       PriceClass: PriceClass_100
  #       ViewerCertificate:
  #         CloudFrontDefaultCertificate: true
  #     Tags:
  #       - Key: Environment
  #         Value: !Ref Environment
  #       - Key: Service
  #         Value: media

  # CloudFront Origin Access Identity
  # CloudFrontOriginAccessIdentity:
  #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  #   Properties:
  #     CloudFrontOriginAccessIdentityConfig:
  #       Comment: !Sub 'Vibe Dating Media OAI - ${Environment}'

  # Lambda function for Media Upload
  MediaUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'vibe-media-upload-${Environment}'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/media_upload.zip
      Layers:
        - !Ref CoreLayerArn
      Environment:
        Variables:
          MEDIA_S3_BUCKET: !Ref MediaBucket
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          MAX_FILE_SIZE: '10485760'
          MAX_IMAGES_PER_PROFILE: '5'
      Timeout: 30
      MemorySize: 512
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: media

  # Lambda function for Media Processing
  MediaProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'vibe-media-processing-${Environment}'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/media_processing.zip
      Layers:
        - !Ref CoreLayerArn
      Environment:
        Variables:
          MEDIA_S3_BUCKET: !Ref MediaBucket
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Timeout: 300
      MemorySize: 1024
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: media

  # Lambda function for Media Management
  MediaManagementFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'vibe-media-management-${Environment}'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/media_management.zip
      Layers:
        - !Ref CoreLayerArn
      Environment:
        Variables:
          MEDIA_S3_BUCKET: !Ref MediaBucket
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: media

  # Lambda Permission for S3 Event
  MediaProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MediaProcessingFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MediaBucket.Arn

  # CloudWatch Log Groups
  MediaUploadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vibe-media-upload-${Environment}'
      RetentionInDays: 14

  MediaProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vibe-media-processing-${Environment}'
      RetentionInDays: 14

  MediaManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vibe-media-management-${Environment}'
      RetentionInDays: 14

  # API Gateway Resources and Methods
  MediaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: 'profiles'

  ProfileIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref MediaResource
      PathPart: '{profileId}'

  MediaSubResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref ProfileIdResource
      PathPart: 'media'

  MediaIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref MediaSubResource
      PathPart: '{mediaId}'

  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref MediaIdResource
      PathPart: 'status'

  CompleteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref MediaIdResource
      PathPart: 'complete'

  OrderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ParentId: !Ref MediaSubResource
      PathPart: 'order'

  # API Gateway Methods
  RequestUploadMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MediaUploadFunction
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ResourceId: !Ref MediaSubResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: ['openid']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MediaUploadFunction.Arn}/invocations'

  GetMediaStatusMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MediaManagementFunction
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ResourceId: !Ref StatusResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: ['openid']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MediaManagementFunction.Arn}/invocations'

  CompleteUploadMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MediaUploadFunction
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ResourceId: !Ref CompleteResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: ['openid']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MediaUploadFunction.Arn}/invocations'

  DeleteMediaMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MediaManagementFunction
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ResourceId: !Ref MediaIdResource
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: ['openid']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MediaManagementFunction.Arn}/invocations'

  ReorderMediaMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MediaManagementFunction
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ResourceId: !Ref OrderResource
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: ['openid']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MediaManagementFunction.Arn}/invocations'

  ListMediaMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MediaManagementFunction
    Properties:
      RestApiId: !Ref ApiGatewayRestApiId
      ResourceId: !Ref MediaSubResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: ['openid']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MediaManagementFunction.Arn}/invocations'

  # Lambda Permissions for API Gateway
  MediaUploadApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MediaUploadFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${Region}:${AWS::AccountId}:${ApiGatewayRestApiId}/*'

  MediaManagementApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MediaManagementFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${Region}:${AWS::AccountId}:${ApiGatewayRestApiId}/*'

Outputs:
  MediaBucketName:
    Description: 'S3 Bucket for Media Storage'
    Value: !Ref MediaBucket
    Export:
      Name: !Sub '${AWS::StackName}-MediaBucketName'

  MediaBucketArn:
    Description: 'S3 Bucket ARN for Media Storage'
    Value: !GetAtt MediaBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaBucketArn'

  # CloudFrontDistributionId:
  #   Description: 'CloudFront Distribution ID for Media Delivery'
  #   Value: !Ref CloudFrontDistribution
  #   Export:
  #     Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  # CloudFrontDomainName:
  #   Description: 'CloudFront Domain Name for Media Delivery'
  #   Value: !GetAtt CloudFrontDistribution.DomainName
  #   Export:
  #     Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  MediaUploadFunctionArn:
    Description: 'Media Upload Lambda Function ARN'
    Value: !GetAtt MediaUploadFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaUploadFunctionArn'

  MediaProcessingFunctionArn:
    Description: 'Media Processing Lambda Function ARN'
    Value: !GetAtt MediaProcessingFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaProcessingFunctionArn'

  MediaManagementFunctionArn:
    Description: 'Media Management Lambda Function ARN'
    Value: !GetAtt MediaManagementFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaManagementFunctionArn'
