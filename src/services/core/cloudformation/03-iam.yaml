AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vibe Dating - Core-Service IAM Resources Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  Region:
    Type: String
    Description: Region for the application (e.g., il-central-1)

  DynamoDBTableArn:
    Type: String
    Description: DynamoDB Table ARN (imported from dynamodb stack)

  DynamoDBKMSKeyArn:
    Type: String
    Description: DynamoDB KMS Key ARN (imported from dynamodb stack)

  LambdaCodeBucketArn:
    Type: String
    Description: Lambda Code Bucket ARN (imported from s3 stack)

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'vibe-auth-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Ref DynamoDBTableArn
                  - !Sub '${DynamoDBTableArn}/index/*'
        - PolicyName: KMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Ref DynamoDBKMSKeyArn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${LambdaCodeBucketArn}/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${Region}:${AWS::AccountId}:secret:vibe-dating/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth

  # IAM Role for API Gateway Authorizer
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'vibe-api-authorizer-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${Region}:${AWS::AccountId}:function:vibe-user-jwt-authorizer-${Environment}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth

Outputs:
  LambdaExecutionRoleArn:
    Description: 'Lambda Execution Role ARN'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleArn'

  ApiGatewayAuthorizerRoleArn:
    Description: 'API Gateway Authorizer Role ARN'
    Value: !GetAtt ApiGatewayAuthorizerRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayAuthorizerRoleArn' 