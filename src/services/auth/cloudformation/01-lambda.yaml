AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vibe Dating - Auth-Service Lambda Resources Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  Region:
    Type: String
    Description: Region for the application (e.g., il-central-1)

  LambdaCodeBucketName:
    Type: String
    Description: Lambda Code Bucket Name (imported from s3 stack)

  LambdaExecutionRoleArn:
    Type: String
    Description: Lambda Execution Role ARN (imported from iam stack)

  DynamoDBTableName:
    Type: String
    Description: DynamoDB Table Name (imported from dynamodb stack)

Resources:
  # Lambda Layer for shared dependencies
  AuthLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'vibe-auth-layer-${Environment}'
      Description: 'Vibe Dating App base layer with shared dependencies'
      Content:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/auth_layer.zip
      CompatibleRuntimes:
        - python3.11
      CompatibleArchitectures:
        - x86_64
      # Tags:
      #   - Key: Environment
      #     Value: !Ref Environment
      #   - Key: Service
      #     Value: auth

  # Lambda function for platform authentication
  AuthPlatformFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'vibe-platform-auth-${Environment}'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/auth_platform.zip
      Layers:
        - !Ref AuthLayer
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN_SECRET_ARN: !Sub 'arn:aws:secretsmanager:${Region}:${AWS::AccountId}:secret:vibe-dating/telegram-bot-token/${Environment}'
          JWT_SECRET_ARN: !Sub 'arn:aws:secretsmanager:${Region}:${AWS::AccountId}:secret:vibe-dating/jwt-secret/${Environment}'
          UUID_NAMESPACE_SECRET_ARN: !Sub 'arn:aws:secretsmanager:${Region}:${AWS::AccountId}:secret:vibe-dating/uuid-namespace/${Environment}'
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth

  # Lambda function for JWT authorization
  AuthJWTAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'vibe-auth-jwt-authorizer-${Environment}'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/auth_jwt_authorizer.zip
      Layers:
        - !Ref AuthLayer
      Environment:
        Variables:
          JWT_SECRET_ARN: !Sub 'arn:aws:secretsmanager:${Region}:${AWS::AccountId}:secret:vibe-dating/jwt-secret/${Environment}'
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth

  # CloudWatch Log Group for Lambda functions
  AuthPlatformLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vibe-platform-auth-${Environment}'
      RetentionInDays: 14

  AuthJWTAuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vibe-auth-jwt-authorizer-${Environment}'
      RetentionInDays: 14

Outputs:
  AuthPlatformFunctionArn:
    Description: 'Platform Auth Lambda Function ARN'
    Value: !GetAtt AuthPlatformFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuthPlatformFunctionArn'

  AuthJWTAuthorizerFunctionArn:
    Description: 'JWT Authorizer Lambda Function ARN'
    Value: !GetAtt AuthJWTAuthorizerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuthJWTAuthorizerFunctionArn'

  AuthLayerArn:
    Description: 'Vibe Base Layer ARN'
    Value: !Ref AuthLayer
    Export:
      Name: !Sub '${AWS::StackName}-AuthLayerArn'

  AuthPlatformFunctionName:
    Description: 'Platform Auth Lambda Function Name'
    Value: !Ref AuthPlatformFunction
    Export:
      Name: !Sub '${AWS::StackName}-AuthPlatformFunctionName'

  AuthJWTAuthorizerFunctionName:
    Description: 'JWT Authorizer Lambda Function Name'
    Value: !Ref AuthJWTAuthorizerFunction
    Export:
      Name: !Sub '${AWS::StackName}-AuthJWTAuthorizerFunctionName' 