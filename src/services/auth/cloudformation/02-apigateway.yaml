AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vibe Dating App - API Gateway Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DomainName:
    Type: String
    Default: api.vibe-dating.io
    Description: Domain name for the API Gateway

  AllowedOrigins:
    Type: CommaDelimitedList
    Default: https://web.telegram.org,https://t.me
    Description: Allowed CORS origins

  JWTAuthorizerFunctionArn:
    Type: String
    Description: JWT Authorizer Lambda Function ARN (imported from lambda stack)

  ApiGatewayAuthorizerRoleArn:
    Type: String
    Description: API Gateway Authorizer Role ARN (imported from iam stack)

  PlatformAuthFunctionArn:
    Type: String
    Description: Platform Auth Lambda Function ARN (imported from lambda stack)

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'vibe-api-${Environment}'
      Description: 'Vibe Dating App API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - '*/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth

  # API Gateway Authorizer
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub 'vibe-jwt-authorizer-${Environment}'
      Type: TOKEN
      RestApiId: !Ref ApiGateway
      AuthorizerUri: !Sub 
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - LambdaArn: !Ref JWTAuthorizerFunctionArn
      AuthorizerCredentials: !Ref ApiGatewayAuthorizerRoleArn
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization

  # Lambda permission for API Gateway to invoke authorizer
  AuthorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JWTAuthorizerFunctionArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'

  # API Gateway Resources and Methods
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth

  PlatformAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref AuthResource
      PathPart: platform

  PlatformAuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref PlatformAuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !Ref PlatformAuthFunctionArn
      RequestParameters:
        method.request.header.Content-Type: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '401'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permission for API Gateway to invoke platform auth function
  PlatformAuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PlatformAuthFunctionArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'

  # OPTIONS method for CORS
  PlatformAuthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref PlatformAuthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PlatformAuthMethod
      - PlatformAuthOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiGatewayId:
    Description: 'API Gateway ID'
    Value: !Ref ApiGateway
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  ApiGatewayAuthorizerId:
    Description: 'API Gateway Authorizer ID'
    Value: !Ref ApiGatewayAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayAuthorizerId'

  ApiGatewayRootResourceId:
    Description: 'API Gateway Root Resource ID'
    Value: !GetAtt ApiGateway.RootResourceId
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayRootResourceId' 