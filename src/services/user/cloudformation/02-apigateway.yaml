AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vibe Dating - User-Service API Gateway Resources Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  Region:
    Type: String
    Description: Region for the application (e.g., il-central-1)

  ApiGatewayId:
    Type: String
    Description: API Gateway ID (imported from auth stack)

  ApiGatewayRootResourceId:
    Type: String
    Description: API Gateway Root Resource ID (imported from auth stack)

  ApiGatewayAuthorizerId:
    Type: String
    Description: API Gateway Authorizer ID (imported from auth stack)

  UserProfileMgmtFunctionArn:
    Type: String
    Description: User Profile Management Lambda Function ARN (imported from lambda stack)

Resources:
  # API Gateway Resources
  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: profile

  ProfileIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ProfileResource
      PathPart: '{profileId}'

  # Profile Get Method (GET /profile/{profileId})
  ProfileGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref ProfileIdResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizerId
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !Ref UserProfileMgmtFunctionArn

  # Profile Upsert Method (PUT /profile/{profileId})
  ProfileUpsertMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref ProfileIdResource
      HttpMethod: PUT
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizerId
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !Ref UserProfileMgmtFunctionArn

  # Profile Delete Method (DELETE /profile/{profileId})
  ProfileDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref ProfileIdResource
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizerId
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !Ref UserProfileMgmtFunctionArn

  # OPTIONS method for CORS on /profile/{profileId}
  ProfileIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref ProfileIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true

  # Lambda permission for API Gateway to invoke user profile management function
  UserProfileMgmtLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserProfileMgmtFunctionArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${Region}:${AWS::AccountId}:${ApiGatewayId}/*'

  # API Gateway Deployment (create new deployment for user service endpoints)
  UserServiceApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProfileGetMethod
      - ProfileUpsertMethod
      - ProfileDeleteMethod
      - ProfileIdOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayId
      StageName: !Ref Environment
      Description: !Sub 'User service deployment for ${Environment}'

Outputs:
  ProfileResourceId:
    Description: 'Profile Resource ID'
    Value: !Ref ProfileResource
    Export:
      Name: !Sub '${AWS::StackName}-ProfileResourceId'

  ProfileIdResourceId:
    Description: 'Profile ID Resource ID'
    Value: !Ref ProfileIdResource
    Export:
      Name: !Sub '${AWS::StackName}-ProfileIdResourceId'