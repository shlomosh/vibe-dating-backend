AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vibe Dating - User-Service Lambda Resources Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  ApiRegion:
    Type: String
    Description: Region for the application (e.g., il-central-1)

  LambdaCodeBucketName:
    Type: String
    Description: Lambda Code Bucket Name (imported from s3 stack)

  LambdaExecutionRoleArn:
    Type: String
    Description: Lambda Execution Role ARN (imported from iam stack)

  DynamoDBTableName:
    Type: String
    Description: DynamoDB Table Name (imported from dynamodb stack)

  AuthLayerArn:
    Type: String
    Description: Auth Layer ARN (imported from auth stack)

Resources:
  # Lambda Layer for user service dependencies
  UserLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'vibe-user-layer-${Environment}'
      Description: 'Vibe Dating App user service layer with dependencies'
      Content:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/user_layer.zip
      CompatibleRuntimes:
        - python3.11
      CompatibleArchitectures:
        - x86_64

  # Single Lambda function for all profile operations
  ProfilesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'vibe-profiles-${Environment}'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: lambda/profiles.zip
      Layers:
        - !Ref AuthLayerArn
        - !Ref UserLayer
      Environment:
        Variables:
          JWT_SECRET_ARN: !Sub 'arn:aws:secretsmanager:${ApiRegion}:${AWS::AccountId}:secret:vibe-dating/jwt-secret/${Environment}'
          UUID_NAMESPACE_SECRET_ARN: !Sub 'arn:aws:secretsmanager:${ApiRegion}:${AWS::AccountId}:secret:vibe-dating/uuid-namespace/${Environment}'
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: user

  # CloudWatch Log Group for Lambda function
  ProfilesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vibe-profiles-${Environment}'
      RetentionInDays: 14

Outputs:
  ProfilesFunctionArn:
    Description: 'Profiles Lambda Function ARN'
    Value: !GetAtt ProfilesFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ProfilesFunctionArn'

  UserLayerArn:
    Description: 'User Service Layer ARN'
    Value: !Ref UserLayer
    Export:
      Name: !Sub '${AWS::StackName}-UserLayerArn'

  ProfilesFunctionName:
    Description: 'Profiles Lambda Function Name'
    Value: !Ref ProfilesFunction
    Export:
      Name: !Sub '${AWS::StackName}-ProfilesFunctionName'